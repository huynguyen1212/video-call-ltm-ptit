{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Huy NQ\\\\Desktop\\\\chat-app\\\\src\\\\common\\\\context\\\\ThemeContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport theme from \"../styles/theme\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let ETheme;\n\n(function (ETheme) {\n  ETheme[\"LIGHT\"] = \"light\";\n  ETheme[\"DARK\"] = \"dark\";\n})(ETheme || (ETheme = {}));\n\nconst CustomThemeProvider = ({\n  children\n}) => {\n  _s();\n\n  const [themeType, setThemeType] = useState(null);\n\n  const setTheme = () => {\n    const nextTheme = themeType === ETheme[\"LIGHT\"] ? ETheme[\"DARK\"] : ETheme[\"LIGHT\"];\n    setThemeType(nextTheme);\n    localStorage.setItem('theme', nextTheme);\n  };\n\n  useEffect(() => {\n    const storedTheme = localStorage.getItem('theme');\n\n    if (Object.values(ETheme).includes(storedTheme)) {\n      setThemeType(storedTheme);\n    } else {\n      setThemeType(ETheme[\"LIGHT\"]);\n      localStorage.setItem('theme', ETheme[\"LIGHT\"]);\n    }\n  }, []);\n  if (!themeType) return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: {\n      theme: theme[themeType],\n      setTheme,\n      themeType\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CustomThemeProvider, \"hkYzoIM234NC7R8bxNdop65YASw=\");\n\n_c = CustomThemeProvider;\nexport default CustomThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomThemeProvider\");","map":{"version":3,"sources":["C:/Users/Huy NQ/Desktop/chat-app/src/common/context/ThemeContext.tsx"],"names":["useEffect","useState","ThemeProvider","theme","ETheme","CustomThemeProvider","children","themeType","setThemeType","setTheme","nextTheme","localStorage","setItem","storedTheme","getItem","Object","values","includes"],"mappings":";;;AAAA,SAAoBA,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;;AAEA,WAAYC,MAAZ;;WAAYA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;GAAAA,M,KAAAA,M;;AAKZ,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA2C;AAAA;;AACrE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAgB,IAAhB,CAA1C;;AAEA,QAAMQ,QAAQ,GAAG,MAAM;AACrB,UAAMC,SAAS,GAAGH,SAAS,KAAKH,MAAM,CAAC,OAAD,CAApB,GAAgCA,MAAM,CAAC,MAAD,CAAtC,GAAiDA,MAAM,CAAC,OAAD,CAAzE;AACAI,IAAAA,YAAY,CAACE,SAAD,CAAZ;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,SAA9B;AACD,GAJD;;AAMAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,WAAW,GAAGF,YAAY,CAACG,OAAb,CAAqB,OAArB,CAApB;;AACA,QAAGC,MAAM,CAACC,MAAP,CAAcZ,MAAd,EAAsBa,QAAtB,CAA+BJ,WAA/B,CAAH,EAAgD;AAC9CL,MAAAA,YAAY,CAACK,WAAD,CAAZ;AACD,KAFD,MAGK;AACHL,MAAAA,YAAY,CAACJ,MAAM,CAAC,OAAD,CAAP,CAAZ;AACAO,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BR,MAAM,CAAC,OAAD,CAApC;AACD;AACF,GATQ,EASN,EATM,CAAT;AAWA,MAAG,CAACG,SAAJ,EAAe,oBAAO,qCAAP;AAEf,sBACE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAAEJ,MAAAA,KAAK,EAAEA,KAAK,CAACI,SAAD,CAAd;AAA2BE,MAAAA,QAA3B;AAAqCF,MAAAA;AAArC,KAAtB;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA3BD;;GAAMD,mB;;KAAAA,mB;AA6BN,eAAeA,mBAAf","sourcesContent":["import { ReactNode, useEffect, useState } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport theme from \"../styles/theme\";\n\nexport enum ETheme {\n  LIGHT = \"light\",\n  DARK = \"dark\",\n}\n\nconst CustomThemeProvider = ({ children }: { children: ReactNode }) => {\n  const [themeType, setThemeType] = useState<ETheme | null>(null);\n\n  const setTheme = () => {\n    const nextTheme = themeType === ETheme[\"LIGHT\"] ? ETheme[\"DARK\"] : ETheme[\"LIGHT\"]\n    setThemeType(nextTheme);\n    localStorage.setItem('theme', nextTheme);\n  };\n\n  useEffect(() => {\n    const storedTheme = localStorage.getItem('theme') as ETheme;\n    if(Object.values(ETheme).includes(storedTheme)) {\n      setThemeType(storedTheme);\n    }\n    else {\n      setThemeType(ETheme[\"LIGHT\"]);\n      localStorage.setItem('theme', ETheme[\"LIGHT\"]);\n    }\n  }, [])\n\n  if(!themeType) return <></>\n\n  return (\n    <ThemeProvider theme={{ theme: theme[themeType], setTheme, themeType }}>\n      {children}\n    </ThemeProvider>\n  );\n};\n\nexport default CustomThemeProvider;\n"]},"metadata":{},"sourceType":"module"}